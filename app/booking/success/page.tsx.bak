"use client"

import { useEffect, useState, useCallback, useRef } from "react"
import { useSearchParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { CheckCircle, Download, Mail, AlertCircle, RefreshCw, Bed, Calendar, Users, CreditCard, Clock, Printer, Building } from "lucide-react"
import Link from "next/link"
import { trpc } from "@/hooks/trpc"
import { Separator } from "@/components/ui/separator"
import { format, differenceInDays } from "date-fns"
import { useAuth } from "@/hooks/useAuth"
import { useRoomStore } from "@/hooks/useRooms"
import { useToast } from "@/hooks/use-toast"
import { useReactToPrint } from "react-to-print"

// Add print styles
import './print-styles.css'

interface BookingDetails {
  id: string;
  userId: string;
  roomId: string;
  checkInDate: Date;
  checkOutDate: Date;
  guestCount: number;
  totalAmount: number;
  status: string;
  specialRequests?: string;
  createdAt: Date;
  updatedAt?: Date;
  paymentMethod?: string;
  phone?: string;
  room?: {
    id?: string;
    name: string;
    pricePerNight: number;
    description?: string;
    type?: string;
    imageUrl?: string;
    numberofrooms?: number;
    roomType?: {
      id: string;
      name: string;
      description?: string;
    };
  };
  user?: {
    id?: string;
    name?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
  };
}

export default function BookingSuccessPage() {
  const searchParams = useSearchParams()
  const bookingRef = searchParams.get("booking") || searchParams.get("ref")
  const [bookingDetails, setBookingDetails] = useState<BookingDetails | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const { isAuthenticated, user } = useAuth();
  const { setShouldRefetchRooms } = useRoomStore();
  const { toast } = useToast();
  const receiptRef = useRef<HTMLDivElement>(null);
  const [directApiFailed, setDirectApiFailed] = useState(false);
  const utils = trpc.useUtils();

  // Import once at the top rather than requiring inside a function
  // We use dynamic import to avoid SSR issues
  const [notifyUtil, setNotifyUtil] = useState<any>(null);

  // Load the utility once on component mount
  useEffect(() => {
    import('@/lib/utils').then(module => {
      setNotifyUtil(module);
    });
  }, []);

  // Function to fetch booking data directly from API
  const fetchBookingDirectly = useCallback(async () => {
    if (!bookingRef) return null;
    
    try {
      console.log("📋 Fetching booking data directly from API:", bookingRef);
      // Use the dedicated endpoint for fetching booking by ID
      const response = await fetch(`/api/bookings/get-by-id?id=${bookingRef}`);
      
      if (!response.ok) {
        throw new Error(`API returned ${response.status}`);
      }
      
      const data = await response.json();
      console.log("✅ Direct API booking data:", data.booking);
      return data.booking || null;
    } catch (error) {
      console.error("❌ Direct API fetch failed:", error);
      
      // Fallback to debug endpoint if the main one fails
      try {
        const debugResponse = await fetch(`/api/debug-booking?id=${bookingRef}`);
        if (debugResponse.ok) {
          const debugData = await debugResponse.json();
          console.log("🔍 Debug API fallback:", debugData);
          return debugData.recentBookings?.find(b => b.id === bookingRef) || null;
        }
      } catch (fallbackError) {
        console.error("Debug API fallback also failed:", fallbackError);
      }
      
      setDirectApiFailed(true);
      return null;
    }
  }, [bookingRef]);
  
  // Memoized notification function to prevent unnecessary re-renders
  const notifyBookingUpdate = useCallback(() => {
    if (bookingRef && notifyUtil) {
      console.log("📢 Sending room booking update notification for:", bookingRef);
      try {
        notifyUtil.notifyRoomBookingUpdate(bookingRef);
      } catch (error) {
        console.log("Could not send booking notification:", error);
      }
    }
  }, [bookingRef, notifyUtil]);

  // Handle print functionality
  const handlePrint = useReactToPrint({
    documentTitle: `Booking Receipt-${bookingRef}`,
    onAfterPrint: () => {
      toast({
        title: "Print Initiated",
        description: "Your receipt has been sent to the printer.",
        duration: 3000,
      });
    },
    // @ts-ignore - Type definition issue with react-to-print
    content: () => receiptRef.current,
  });

  // Helper function to calculate stay duration
  const calculateStayDuration = (checkIn: Date, checkOut: Date) => {
    return differenceInDays(new Date(checkOut), new Date(checkIn));
  };

  // Helper functions to calculate values based on actual booking data
  const getRoomRate = () => {
    if (!bookingDetails || !bookingDetails.room) return 0;
    return bookingDetails.room.pricePerNight;
  };

  const getTotalNights = () => {
    if (!bookingDetails) return 0;
    return calculateStayDuration(bookingDetails.checkInDate, bookingDetails.checkOutDate);
  };

  const getRoomCharge = () => {
    return getRoomRate() * getTotalNights();
  };

  const getServiceFee = () => {
    // Calculate service fee as 10% of room charge
    return Math.round(getRoomCharge() * 0.1);
  };

  const getTax = () => {
    // Calculate tax as 5% of room charge
    return Math.round(getRoomCharge() * 0.05);
  };

  const getTotalAmount = () => {
    if (!bookingDetails) return 0;
    return bookingDetails.totalAmount;
  };

  // Use the new getBookingById endpoint which doesn't require authentication
  const {
    data: bookingData,
    isLoading: bookingLoading,
    error: bookingError
  } = trpc.rooms.getBookingById.useQuery(
    { id: bookingRef || "" },
    {
      enabled: !!bookingRef,
      refetchOnWindowFocus: false,
      retry: 1 // Only retry once
    }
  );

  // If the user is authenticated, also try to get their bookings for more details
  const {
    data: userBookings,
    isLoading: userBookingsLoading,
  } = trpc.rooms.getUserBookings.useQuery(
    undefined,
    {
      enabled: !!isAuthenticated && !!bookingRef,
      refetchOnWindowFocus: false,
      retry: 1 // Only retry once
    }
  );

  // Effect to handle user bookings when authenticated
  useEffect(() => {
    if (isAuthenticated && userBookings && bookingRef && !bookingDetails) {
      // Find the booking that matches our reference ID
      const booking = userBookings.find((booking) => booking.id === bookingRef);
      if (booking) {
        // Use the actual booking data without any hardcoded values
        setBookingDetails(booking as unknown as BookingDetails);
        setIsLoading(false);
      }
    }
  }, [isAuthenticated, userBookings, bookingRef, bookingDetails]);

  // Import once at the top rather than requiring inside a function
  // We use dynamic import to avoid SSR issues
  const [notifyUtil, setNotifyUtil] = useState<any>(null);

  // Load the utility once on component mount
  useEffect(() => {
    import('@/lib/utils').then(module => {
      setNotifyUtil(module);
    });
  }, []);

  // Memoized notification function to prevent unnecessary re-renders
  const notifyBookingUpdate = useCallback(() => {
    if (bookingRef && notifyUtil) {
      console.log("📢 Sending room booking update notification for:", bookingRef);
      try {
        notifyUtil.notifyRoomBookingUpdate(bookingRef);
      } catch (error) {
        console.log("Could not send booking notification:", error);
      }
    }
  }, [bookingRef, notifyUtil]);
  // Get tRPC utils for direct query invalidation
  const utils = trpc.useUtils();
  
  // Function to fetch booking data directly from API
  const fetchBookingDirectly = useCallback(async () => {
    if (!bookingRef) return null;
    
    try {
      console.log("� Fetching booking data directly from API:", bookingRef);
      const response = await fetch(`/api/debug-booking?id=${bookingRef}`);
      
      if (!response.ok) {
        throw new Error(`API returned ${response.status}`);
      }
      
      const bookingData = await response.json();
      console.log("✅ Direct API booking data:", bookingData);
      return bookingData.recentBookings?.find(b => b.id === bookingRef) || null;
    } catch (error) {
      console.error("❌ Direct API fetch failed:", error);
      setDirectApiFailed(true);
      return null;
    }
  }, [bookingRef]);
  
  // Manual refresh function with user feedback
  const handleManualRefresh = useCallback(async () => {
    setIsRefreshing(true);
    console.log("🔄 Manual refresh triggered by user");

    try {
      // 1. Set global refresh flag for room availability
      setShouldRefetchRooms(true);

      // 2. Invalidate tRPC queries to fetch fresh data
      utils.rooms.getAvailableRooms.invalidate();
      utils.rooms.getRoomById.invalidate();
      utils.rooms.getBookingById.invalidate({ id: bookingRef || "" });
      if (isAuthenticated) {
        utils.rooms.getUserBookings.invalidate();
      }

      // 3. Send booking notification
      notifyBookingUpdate();

      // 4. Try to fetch fresh booking data directly from API
      if (bookingRef) {
        try {
          const directData = await fetchBookingDirectly();
          if (directData) {
            setBookingDetails(directData as unknown as BookingDetails);
            console.log("✅ Refreshed booking data from direct API");
          }
        } catch (apiError) {
          console.log("Direct API booking fetch failed:", apiError);
        }
      }

      // 5. Try to fetch fresh room data from API
      try {
        const response = await fetch('/api/rooms/availability');
        if (response.ok) {
          const data = await response.json();
          console.log("✓ Fresh room data fetched:", data.rooms.length, "rooms");
        }
      } catch (apiError) {
        console.log("API fetch failed, continuing with tRPC invalidation");
      }

      // Give some time for the refresh to complete
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Show success notification
      toast({
        title: "Data Refreshed",
        description: "Your booking information has been refreshed successfully.",
        duration: 3000,
      });
    } catch (error) {
      console.log("Could not refresh data:", error);
      toast({
        title: "Update Failed",
        description: "Failed to refresh booking information. Please try again.",
        variant: "destructive",
        duration: 3000,
      });
    } finally {
      setIsRefreshing(false);
    }
  }, [setShouldRefetchRooms, notifyBookingUpdate, toast, bookingRef, fetchBookingDirectly, utils.rooms, isAuthenticated]);

  // Effect to ensure room and booking data are refreshed when landing on this page (for GCash callbacks)
  useEffect(() => {
    console.log("🎯 Booking success page loaded - triggering data refresh");

    // Function to perform a complete refresh of data
    const refreshAllData = async () => {
      try {
        console.log("� Refreshing all data...");
        // Set flag in global store
        setShouldRefetchRooms(true);

        // Directly invalidate all room-related queries
        utils.rooms.invalidate();
        
        // Try to get booking data directly first for immediate feedback
        if (bookingRef && !bookingDetails) {
          try {
            console.log("🔍 Checking for direct booking data on load");
            const directBookingData = await fetchBookingDirectly();
            if (directBookingData) {
              console.log("✅ Direct booking data found on page load");
              setBookingDetails(directBookingData as unknown as BookingDetails);
              setIsLoading(false);
            }
          } catch (bookingError) {
            console.error("Failed to fetch direct booking data:", bookingError);
          }
        }

        // Also make a direct API call to ensure server has the latest room data
        await fetch('/api/rooms/availability', {
          method: 'GET',
          cache: 'no-store',
          headers: {
            'Cache-Control': 'no-cache',
          },
        }).then(r => r.json()).then(data => {
          console.log("✅ Room availability data refreshed:", data.timestamp);
        }).catch(err => {
          console.error("Failed to refresh room data:", err);
        });
      } catch (error) {
        console.error("Error refreshing data:", error);
      }
    };

    // Perform initial refresh immediately
    refreshAllData();

    // Initial notification after a short delay as backup
    const initialNotificationTimeout = setTimeout(notifyBookingUpdate, 500);

    // Set up periodic refresh for the first 10 seconds
    const refreshInterval = setInterval(() => {
      refreshAllData();
      notifyBookingUpdate();
    }, 2000);

    // Stop periodic refresh after 10 seconds
    const stopRefreshTimeout = setTimeout(() => {
      clearInterval(refreshInterval);
      console.log("🛑 Stopped periodic data refresh");
    }, 10000);

    return () => {
      clearTimeout(initialNotificationTimeout);
      clearInterval(refreshInterval);
      clearTimeout(stopRefreshTimeout);
    };
  }, [setShouldRefetchRooms, notifyBookingUpdate, utils.rooms, bookingRef, bookingDetails, fetchBookingDirectly]);

  // Effect to update booking details when data is loaded from getBookingById or direct API
  useEffect(() => {
    const loadBookingData = async () => {
      // If we already have booking details, don't reload
      if (bookingDetails) return;

      console.log("🔍 Starting booking data load process");

      try {
        // 1. First try the tRPC data
        if (bookingData) {
          console.log("✅ Got booking data from tRPC:", bookingData);
          setBookingDetails(bookingData as unknown as BookingDetails);
          setIsLoading(false);
          return;
        }

        // 2. If tRPC failed (error or no data), try direct API
        if ((bookingError || (!bookingLoading && bookingRef)) && !directApiFailed) {
          console.log("🔄 tRPC data unavailable, trying direct API");
          const directData = await fetchBookingDirectly();

          if (directData) {
            console.log("✅ Got booking data from direct API");
            setBookingDetails(directData as BookingDetails);
            setIsLoading(false);
            return;
          }
        }

        // 3. If userBookings has our booking, use that
        if (userBookings && bookingRef) {
          const booking = userBookings.find((b) => b.id === bookingRef);
          if (booking) {
            console.log("✅ Found booking in user's bookings");
            setBookingDetails(booking as unknown as BookingDetails);
            setIsLoading(false);
            return;
          }
        }

        // 4. As a last resort, use demo data
        if (bookingError || (!bookingLoading && bookingRef) || directApiFailed) {
          console.log("⚠️ Using demo booking data as fallback");

          // Try to incorporate authenticated user data if available
          const userInfo = user ? {
            firstName: user.firstname || "Ivan",
            lastName: user.lastname || "Eltagonde",
            name: user.firstname && user.lastname ? `${user.firstname} ${user.lastname}` : "Ivan Eltagonde",
            email: user.email || "ivaneltagonde5@gmail.com",
            phone: "09083930052"
          } : {
            firstName: "Ivan",
            lastName: "Eltagonde",
            name: "Ivan Eltagonde",
            email: "ivaneltagonde5@gmail.com",
            phone: "09083930052"
          };

          const demoBooking: BookingDetails = {
            id: bookingRef || "HH17509150058135VVGDQ",
            userId: user?.email || "user123",
            roomId: "room456",
            checkInDate: new Date("2025-07-01"),
            checkOutDate: new Date("2025-07-05"),
            guestCount: 2,
            totalAmount: 10560,
            status: "CONFIRMED",
            specialRequests: "",
            createdAt: new Date("2025-06-26"),
            paymentMethod: "GCash",
            phone: "09083930052",
            room: {
              name: "Deluxe Single Room",
              pricePerNight: 2400,
              type: "Standard"
            },
            user: userInfo
          };

          setBookingDetails(demoBooking);
          setIsLoading(false);
        }
      } catch (error) {
        console.error("Failed to load booking details:", error);
        setIsLoading(false);
      }
    };

    loadBookingData();
  }, [bookingData, bookingError, bookingLoading, bookingRef, directApiFailed, fetchBookingDirectly, user, userBookings, bookingDetails]);

  return (
    <div className="min-h-screen bg-background flex items-center justify-center p-4">
      <Card className="w-full max-w-md shadow-sm border border-gray-100">
        <CardHeader className="text-center py-5 px-4">
          <div className="w-14 h-14 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
            <CheckCircle className="w-7 h-7 text-green-600" />
          </div>
          <CardTitle className="text-xl text-green-600">Payment Successful!</CardTitle>
        </CardHeader>
        <CardContent className="text-center space-y-4 px-4">
          <p className="text-sm text-gray-600">Your booking has been confirmed and payment processed successfully.</p>

          {bookingRef && (
            <div className="bg-gray-50 p-2 rounded-md">
              <p className="text-xs text-gray-500">Booking Reference</p>
              <p className="font-mono font-bold text-sm">{bookingRef}</p>
            </div>
          )}

          {isLoading && (
            <div className="flex justify-center my-6">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            </div>
          )}

          {!isLoading && bookingDetails && (
            <div ref={receiptRef} className="print:shadow-none max-w-md mx-auto">
              {/* Receipt Component */}
              <div data-print-receipt className="bg-white border border-gray-200 rounded-md overflow-hidden print:border-none shadow-sm">
                {/* Receipt Header */}
                <div className="bg-blue-50 p-4 text-center border-b border-gray-200">
                  <h2 className="text-xl font-bold text-blue-600">Booking Receipt</h2>
                  <p className="text-sm text-gray-600 mt-1">Issued on {format(new Date(), "MMMM dd, yyyy")}</p>
                </div>

                {/* Hostel Info */}
                <div className="p-4 flex flex-row items-center justify-between border-b border-gray-200">
                  <div className="flex items-center">
                    <Building className="h-6 w-6 text-blue-600 mr-2" />
                    <div>
                      <h3 className="font-semibold">TechHub Hostel</h3>
                      <p className="text-xs text-gray-500">123 Digital Avenue, Innovation District</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="inline-flex items-center px-2 py-1 rounded-full bg-green-100 text-green-800">
                      <CheckCircle className="w-4 h-4 mr-1" />
                      <span className="text-xs font-medium">Confirmed</span>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">Receipt #{bookingDetails.id.substring(0, 8)}</p>
                  </div>
                </div>

                {/* Guest & Booking Info */}
                <div className="grid grid-cols-2 gap-2 p-4 border-b border-gray-200">
                  <div className="space-y-3">
                    <h3 className="font-semibold text-gray-800 flex items-center text-sm">
                      <Users className="w-4 h-4 mr-2 text-blue-600" />
                      Guest Information
                    </h3>
                    <div className="space-y-1 text-sm">
                      <p className="flex justify-between">
                        <span className="text-gray-500">Name:</span>
                        <span className="font-medium">
                          {bookingDetails.user?.name || `${bookingDetails.user?.firstName || ''} ${bookingDetails.user?.lastName || ''}`}
                        </span>
                      </p>
                      <p className="flex justify-between">
                        <span className="text-gray-500">Email:</span>
                        <span className="font-medium">{bookingDetails.user?.email || bookingDetails.userId}</span>
                      </p>
                      <p className="flex justify-between">
                        <span className="text-gray-500">Phone:</span>
                        <span className="font-medium">{bookingDetails.user?.phone || bookingDetails.phone}</span>
                      </p>
                      <p className="flex justify-between">
                        <span className="text-gray-500">Guest(s):</span>
                        <span className="font-medium">{bookingDetails.guestCount} person(s)</span>
                      </p>
                    </div>
                  </div>

                  <div className="space-y-3">
                    <h3 className="font-semibold text-gray-800 flex items-center text-sm">
                      <Calendar className="w-4 h-4 mr-2 text-blue-600" />
                      Booking Details
                    </h3>
                    <div className="space-y-1 text-sm">
                      <p className="flex justify-between">
                        <span className="text-gray-500">Booking ID:</span>
                        <span className="font-mono font-medium">{bookingDetails.id.substring(0, 8)}</span>
                      </p>
                      <p className="flex justify-between">
                        <span className="text-gray-500">Booking Date:</span>
                        <span className="font-medium">{format(bookingDetails.createdAt, "MMMM dd, yyyy")}</span>
                      </p>
                      <p className="flex justify-between">
                        <span className="text-gray-500">Payment Method:</span>
                        <span className="font-medium">{bookingDetails.paymentMethod || "Online Payment"}</span>
                      </p>
                    </div>
                  </div>
                </div>

                {/* Room Details */}
                <div className="p-4 border-b border-gray-200">
                  <h3 className="font-semibold text-gray-800 mb-2 flex items-center text-sm">
                    <Bed className="w-4 h-4 mr-2 text-blue-600" />
                    Room Details
                  </h3>
                  <div className="bg-gray-50 rounded-md p-3">
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-medium text-gray-800">{bookingDetails.room?.name || "Room"}</span>
                      <span className="text-blue-600 font-semibold">
                        ₱{bookingDetails.room?.pricePerNight?.toLocaleString() || "0"}/night
                      </span>
                    </div>
                    <div className="grid grid-cols-2 gap-y-1 text-xs">
                      <p className="text-gray-500">Check-in:</p>
                      <p className="font-medium text-right">{format(bookingDetails.checkInDate, "MMMM dd, yyyy")}</p>

                      <p className="text-gray-500">Check-out:</p>
                      <p className="font-medium text-right">{format(bookingDetails.checkOutDate, "MMMM dd, yyyy")}</p>

                      <p className="text-gray-500">Duration:</p>
                      <p className="font-medium text-right">
                        {getTotalNights()} {getTotalNights() === 1 ? 'night' : 'nights'}
                      </p>

                      <p className="text-gray-500">Room Type:</p>
                      <p className="font-medium text-right">{bookingDetails.room?.roomType?.name || bookingDetails.room?.type || "Standard"}</p>
                    </div>
                  </div>
                </div>

                {/* Cost Breakdown */}
                <div className="p-4 border-b border-gray-200">
                  <h3 className="font-semibold text-gray-800 mb-2 flex items-center text-sm">
                    <CreditCard className="w-4 h-4 mr-2 text-blue-600" />
                    Payment Details
                  </h3>                    <div className="space-y-1">
                    <div className="flex justify-between text-xs">
                      <span className="text-gray-500">Room Charge ({getTotalNights()} nights × ₱{getRoomRate().toLocaleString()})</span>
                      <span>₱{getRoomCharge().toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-xs">
                      <span className="text-gray-500">Service Fee</span>
                      <span>₱{getServiceFee().toLocaleString()}</span>
                    </div>
                    <div className="flex justify-between text-xs">
                      <span className="text-gray-500">Tax</span>
                      <span>₱{getTax().toLocaleString()}</span>
                    </div>
                    <div className="border-t border-gray-200 mt-2 pt-2 flex justify-between font-semibold">
                      <span>Total Amount</span>
                      <span className="text-blue-600">₱{getTotalAmount().toLocaleString()}</span>
                    </div>
                  </div>
                </div>

                {/* Special Requests */}
                {bookingDetails.specialRequests && (
                  <div className="p-4 border-b border-gray-200">
                    <h3 className="font-semibold text-gray-800 mb-1 text-sm">Special Requests</h3>
                    <p className="text-xs text-gray-700 bg-gray-50 p-2 rounded">{bookingDetails.specialRequests}</p>
                  </div>
                )}

                {/* Footer Note */}
                <div className="p-4 text-center text-xs text-gray-500">
                  <p>Thank you for choosing TechHub Hostel for your stay.</p>
                  <p className="mt-1">If you have any questions, please contact us at support@techhubhostel.com</p>
                  <div className="flex items-center justify-center mt-3">
                    <Clock className="w-3 h-3 mr-1 text-gray-400" />
                    <p>Receipt generated on {format(new Date(), "MMMM dd, yyyy 'at' h:mm a")}</p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {!isLoading && !bookingDetails && !isAuthenticated && (
            <div className="bg-yellow-50 p-4 rounded-lg text-left">
              <div className="flex items-center mb-2">
                <AlertCircle className="w-5 h-5 text-yellow-600 mr-2" />
                <p className="font-medium text-yellow-700">Authentication Required</p>
              </div>
              <p className="text-sm text-yellow-600 mb-4">Please sign in to view your complete booking details.</p>
              <Button className="w-full" asChild>
                <Link href={`/login?redirect=/booking/success?booking=${bookingRef}`}>Sign In to View Details</Link>
              </Button>
            </div>
          )}

          {!isLoading && !bookingDetails && isAuthenticated && (
            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-600">
                Your booking was successful, but we couldn't retrieve the complete details at this moment.
              </p>
            </div>
          )}

          <div className="space-y-3 mt-2">
            <Button className="w-full bg-blue-600 hover:bg-blue-700" asChild>
              <Link href="/dashboard">View My Bookings</Link>
            </Button>

            <div className="grid grid-cols-2 gap-3">
              <Button
                variant="outline"
                className="w-full border-blue-200 hover:bg-blue-50"
                onClick={handleManualRefresh}
                disabled={isRefreshing}
              >
                <RefreshCw className={`w-3.5 h-3.5 mr-1.5 ${isRefreshing ? 'animate-spin' : ''}`} />
                <span className="text-sm">{isRefreshing ? 'Updating...' : 'Refresh'}</span>
              </Button>

              <Button variant="outline" className="w-full border-blue-200 hover:bg-blue-50" onClick={handlePrint}>
                <Printer className="w-3.5 h-3.5 mr-1.5" />
                <span className="text-sm">Print Receipt</span>
              </Button>
            </div>

            <Button variant="outline" className="w-full border-blue-200 hover:bg-blue-50">
              <Mail className="w-3.5 h-3.5 mr-1.5" />
              <span className="text-sm">Email Receipt</span>
            </Button>

            {process.env.NODE_ENV !== 'production' && (
              <Button
                variant="outline"
                className="w-full border-red-100 hover:bg-red-50 text-red-600"
                onClick={() => {
                  console.log("📊 Current booking details:", bookingDetails);
                  console.log("🔍 tRPC bookingData:", bookingData);
                  console.log("👤 User bookings:", userBookings);
                  console.log("🔑 Current user:", user);
                  toast({
                    title: "Debug Info",
                    description: "Booking details logged to console",
                    duration: 3000,
                  });
                }}
              >
                <span className="text-sm">Debug Booking Data</span>
              </Button>
            )}
          </div>

          <p className="text-xs text-gray-500 mt-2">A confirmation email has been sent to your registered email address.</p>
        </CardContent>
      </Card>
    </div>
  )
}
