// hooks/useAuth.ts
'use client';

import { useState, useEffect } from 'react';
import { trpc } from './trpc';
import { useRouter } from 'next/navigation';

export function useAuth() {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [user, setUser] = useState<any>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);

  const router = useRouter();

  const { mutateAsync: loginMutation } = trpc.auth.login.useMutation();
  const { mutateAsync: registerMutation } = trpc.auth.register.useMutation();

  // Check if user is already logged in
  useEffect(() => {
    const checkAuthStatus = async () => {
      try {
        // Try to get session from API route
        const response = await fetch('/api/auth/session');
        const data = await response.json();
        
        if (data && data.user) {
          setUser(data.user);
          setIsAuthenticated(true);
        } else {
          // Fallback to localStorage if API fails
          const userData = localStorage.getItem('user');
          if (userData) {
            try {
              setUser(JSON.parse(userData));
              setIsAuthenticated(true);
            } catch (e) {
              localStorage.removeItem('user');
            }
          }
        }
      } catch (error) {
        console.error('Failed to check auth status:', error);
        // Try localStorage as fallback
        const userData = localStorage.getItem('user');
        if (userData) {
          try {
            setUser(JSON.parse(userData));
            setIsAuthenticated(true);
          } catch (e) {
            localStorage.removeItem('user');
          }
        }
      } finally {
        setIsLoading(false);
      }
    };

    checkAuthStatus();
  }, []);

  // Login function
  const login = async (email: string, password: string) => {
    try {
      setIsLoading(true);
      const result = await loginMutation({ email, password });

      if (result.status === 'success') {
        // Save user in localStorage
        localStorage.setItem('user', JSON.stringify(result.user));
        setUser(result.user);
        setIsAuthenticated(true);
        return { success: true };
      }

      return { success: false, error: 'Login failed' };
    } catch (error: any) {
      return {
        success: false,
        error: error.message || 'Login failed'
      };
    } finally {
      setIsLoading(false);
    }
  };

  // Register function
  const register = async (userData: {
    firstname: string;
    lastname: string;
    email: string;
    password: string;
  }) => {
    try {
      setIsLoading(true);
      console.log("Starting registration process...");
      const result = await registerMutation(userData);
      console.log("Registration result:", result);

      if (result.status === 'success') {
        // Return success but don't auto-login
        return { success: true, message: 'Registration successful!' };
      }

      return { success: false, error: 'Registration failed' };
    } catch (error: any) {
      console.error("Registration error:", error);
      // Extract error message from TRPC error or use fallback
      const errorMessage = error.message ||
        error.data?.message ||
        error.shape?.message ||
        'Registration failed';

      return {
        success: false,
        error: errorMessage
      };
    } finally {
      setIsLoading(false);
    }
  };

  // Logout function
  const logout = () => {
    localStorage.removeItem('user');
    setUser(null);
    setIsAuthenticated(false);
    router.push('/login');
  };

  return {
    user,
    isLoading,
    isAuthenticated,
    login,
    register,
    logout
  };
}

export default useAuth;
